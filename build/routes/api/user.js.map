{"version":3,"sources":["../../../server/routes/api/user.js"],"names":["router","post","req","res","body","errors","isValid","status","json","User","findOne","email","then","user","newUser","password","bcrypt","genSalt","err","salt","hash","save","payload","id","jwt","sign","SECRET","expiresIn","token","success","catch","console","log","compare","isMatch"],"mappings":"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","file":"user.js","sourcesContent":["import {Router} from 'express';\nimport bcrypt from 'bcryptjs';\nimport User from '../../Model/User';\nimport {validateRegister} from \"../../validaton/register\";\nimport jwt from 'jsonwebtoken';\nimport {SECRET} from \"../../config/keys\";\nimport {validateLogin} from \"../../validaton/login\";\n\nconst router = Router();\n\nrouter.post('/register',(req,res) => {\n    const {errors, isValid} = validateRegister(req.body);\n\n    if (!isValid) {\n        return res.status(400).json(errors);\n    }\n\n    User.findOne({email: req.body.email})\n        .then(user => {\n            if (user) {\n                errors.email = 'Email already exists!';\n                return res.status(400).json(errors);\n            }\n            const newUser = new User({\n                email: req.body.email,\n                password: req.body.password,\n            });\n\n            bcrypt.genSalt(10,(err,salt)=>{\n                bcrypt.hash(newUser.password,salt,(err,hash)=>{\n                    newUser.password = hash;\n                    newUser\n                        .save()\n                        .then(user => {\n                            const payload = {id:user.id,email:user.email};\n                            jwt.sign(payload,SECRET,{expiresIn: 72000},(err,token)=>{\n                                res.json({\n                                    success:true,\n                                    token:`Bearer `+token\n                                })\n                            })\n                        })\n                        .catch(err => console.log(err));\n                })\n            })\n        });\n});\n\nrouter.post('/login',(req,res)=>{\n    const {errors,isValid} = validateLogin(req.body);\n\n    if(!isValid){\n        return res.status(400).json(errors)\n    }\n\n    User.findOne({email:req.body.email})\n        .then(user => {\n            if(!user){\n                errors.email = \"Email does not exists!\";\n                return res.status(400).json(errors)\n            }\n\n            bcrypt.compare(req.body.password,user.password)\n                .then(isMatch => {\n                    if(isMatch){\n                        const payload = {id:user.id,email:user.email};\n                        jwt.sign(payload,SECRET,{expiresIn: 72000},(err,token) => {\n                            res.json({\n                                success:true,\n                                token: `Bearer `+token\n                            })\n                        })\n                    } else {\n                        errors.password = \"Password do not match.\";\n                        return res.status(400).json(errors);\n                    }\n                })\n                .catch(err => console.log(err));\n\n        })\n});\n\nexport default router;\n"]}